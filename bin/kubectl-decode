#!/usr/bin/env bash
# shellcheck source-path=..

kubectl-decode() {
  local pkgroot; pkgroot=$(realpath "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/..")

  if [[ $1 != 'decode' ]]; then
    set -- "decode" "$@"
  fi
  DOC="Decode a kubernetes secret
Usage:
  kubectl decode SECRET FILENAME"
# docopt parser below, refresh this parser with `docopt.sh kubectl-decode`
# shellcheck disable=2016,2086,2317,1090,1091,2034
docopt() { source "$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh" '2.0.0' || {
ret=$?;printf -- "exit %d\n" "$ret";exit "$ret";};set -e;trimmed_doc=${DOC:0:66}
usage=${DOC:27:39};digest=0d101;options=();node_0(){ value SECRET a;};node_1(){
value FILENAME a;};node_2(){ switch decode a:decode;};node_3(){ sequence 2 0 1;}
cat <<<' docopt_exit() { [[ -n $1 ]] && printf "%s\n" "$1" >&2;printf "%s\n" \
"${DOC:27:39}" >&2;exit 1;}';local varnames=(SECRET FILENAME decode) varname
for varname in "${varnames[@]}"; do unset "var_$varname";done;parse 3 "$@"
local p=${DOCOPT_PREFIX:-''};for varname in "${varnames[@]}"; do unset \
"$p$varname";done;eval $p'SECRET=${var_SECRET:-};'$p'FILENAME=${var_FILENAME:-'\
'};'$p'decode=${var_decode:-false};';local docopt_i=1;[[ $BASH_VERSION =~ ^4.3 \
]] && docopt_i=2;for ((;docopt_i>0;docopt_i--)); do for varname in \
"${varnames[@]}"; do declare -p "$p$varname";done;done;}
# docopt parser above, complete command for generating this parser is `docopt.sh --library='"$pkgroot/.upkg/docopt-lib.sh/docopt-lib.sh"' kubectl-decode`
  eval "$(docopt "$@")"
  kubectl get secret "$SECRET" \
    -o 'go-template={{index .data "'"$FILENAME"'"}}' \
    | (base64 -D 2>/dev/null || base64 -d)
}

kubectl-decode "$@"
